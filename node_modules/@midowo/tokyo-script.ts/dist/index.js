"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokyoScript = void 0;
const tslib_1 = require("tslib");
const functions_1 = require("./wind/functions");
const discord_js_1 = require("discord.js");
const variables_1 = require("./wind/variables");
const embeds_1 = tslib_1.__importDefault(require("./wind/embeds"));
class TokyoScript {
    functions;
    embed_functions;
    custom_vars;
    client;
    brackets;
    options;
    constructor(client, options) {
        if (!(client instanceof discord_js_1.Client))
            throw new TypeError('TokyoScript: Invalid client provided in constructor.');
        this.functions = new Map();
        this.custom_vars = [];
        this.embed_functions = new Map();
        this.options = {
            brackets: options?.brackets || 1,
            separator: options?.separator || ',',
            allowEmbeds: options?.allowEmbeds === false ? false : true,
            ignore: []
        };
        let brackets = this.options.brackets == 1 ? '{ }' : this.options.brackets == 2 ? '\\[ \\]' : '{ }';
        this.brackets = { start: brackets.split(' ')[0], end: brackets.split(' ')[1] };
        this.client = client;
        this.load_functions();
    }
    unpack(func) {
        const name = func.split(':')[0].toLowerCase();
        const inside = func.match((new RegExp(`:[^${this.brackets.end}]+`, 'gim')))[0].replace(':', '');
        return {
            name: name.replace(/[^a-zA-Z]/g, ''),
            inside: inside,
            splits: inside.split(this.options.separator),
            itself: func,
            regexp: func.match((new RegExp(`${this.brackets.start}[a-zA-Z]+:[^${this.brackets.end}]+${this.brackets.end}`)))
        };
    }
    parse_functions(text) {
        if (!text)
            return '';
        let functions = text.match((new RegExp(`${this.brackets.start}(${Array.from(this.functions, ([name, value]) => name).join('|')})+:[^${this.brackets.end}]+${this.brackets.end}`, "gim")));
        if (!functions)
            return text;
        let final = text;
        for (const func of functions) {
            let _ = this.unpack(func);
            let Func = this.functions.get(_.name);
            if (!_.inside || !Func || this.options.ignore?.includes(_.name))
                continue;
            final = Func.code(final, _);
        }
        return final;
    }
    parse_embeds(text) {
        if (!text)
            return { content: null, embeds: [] };
        let embed = new discord_js_1.EmbedBuilder();
        let functions = text.match((new RegExp(`${this.brackets.start}[a-zA-Z]+:[^${this.brackets.end}]+${this.brackets.end}`, "gim")));
        if (!functions)
            return { content: text, embeds: [] };
        let final = { content: text, embeds: [] };
        for (const func of functions) {
            let _ = this.unpack(func);
            let Func = this.embed_functions.get(_.name);
            if (!_.inside || !Func || this.options.ignore?.includes(_.name))
                continue;
            final = Func.code(final, _, embed);
        }
        final.embeds = !embed.toJSON().title && !embed.toJSON().description && !embed.toJSON().image && !embed.toJSON().thumbnail && !embed.toJSON().author && !embed.toJSON().footer ? [] : [embed];
        final.content = final.content?.trim() || null;
        return final;
    }
    parse_variables(text, context) {
        if (!text)
            return '';
        return (0, variables_1.Parse)(text, context, this.brackets, this.custom_vars || []);
    }
    load_functions() {
        this.addFunction(functions_1.Random);
        this.addFunction(functions_1.RandomNumber);
        for (const func of embeds_1.default.functions) {
            this.embed_functions.set(func.name, { name: func.name, code: func.code });
        }
    }
    interprete(text, context) {
        if (!text)
            return '';
        text = text.replaceAll('\\}', '@right_bracket#').replaceAll('\\{', '@left_bracket#');
        if (!context && this.options.allowEmbeds)
            throw new TypeError('TokyoScript: Invalid context provided. Try with: Message | Interaction | GuildMember');
        let without_embeds = this.parse_functions(this.parse_variables(text, context));
        let with_embeds = this.parse_embeds(without_embeds);
        return this.options.allowEmbeds ? JSON.parse(JSON.stringify(with_embeds).replaceAll('@right_bracket#', '}').replaceAll('@left_bracket#', '{')) : without_embeds.replaceAll('@right_bracket#', '}').replaceAll('@left_bracket#', '{');
    }
    addFunction(func) {
        if (!func.name || !func)
            throw new TypeError('TokyoScript: Missing parameters in addFunction()');
        if (typeof func.name !== 'string')
            throw new TypeError('TokyoScript: Invalid parameters provided in addFunction().');
        if (this.functions.has(func.name.toLowerCase()))
            throw new TypeError('TokyoScript: This function already exists.');
        this.functions.set(func.name.toLowerCase(), func);
    }
    deleteFunction(name) {
        if (!name)
            throw new TypeError('TokyoScript: Missing name in deleteFunction()');
        if (typeof name !== 'string')
            throw new TypeError('TokyoScript: Invalid name provided in addFunction()');
        if (!this.functions.has(name.toLowerCase()))
            throw new TypeError('TokyoScript: This function doesn\'t exist.');
        this.functions.delete(name.toLowerCase());
    }
    addVariable(name, value) {
        if (!name || !value)
            throw new TypeError('TokyoScript: Missing parameters in addVariable()');
        if (typeof name !== 'string' || typeof value !== 'string')
            throw new TypeError('TokyoScript: Invalid parameters provided in addVariable()');
        if (this.custom_vars.some(v => v.name === name.toLowerCase()))
            throw new TypeError('TokyoScript: This variable already exists.');
        this.custom_vars.push({ name, value });
    }
    deleteVariable(name) {
        if (!name)
            throw new TypeError('TokyoScript: Missing name in deleteVariable()');
        if (typeof name !== 'string')
            throw new TypeError('TokyoScript: Invalid name provided in addVariable()');
        if (!this.custom_vars.some(v => v.name === name.toLowerCase()))
            throw new TypeError('TokyoScript: This variable doesn\'t exist.');
        this.custom_vars = this.custom_vars.filter(v => v.name !== name.toLowerCase());
    }
}
exports.TokyoScript = TokyoScript;
tslib_1.__exportStar(require("./wind/interfaces"), exports);

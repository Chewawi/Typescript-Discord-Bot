import { GenerateSource, GenerateFromMessagesOpts, CreateTranscriptOptions, ValidTextChannels, ReturnTypeWrapper } from './types';
/**
 * @example
 *   const attachment = await generateFromMessages(messages, channel, {
 *       returnBuffer: false, // Return a buffer instead of a MessageAttachment
 *       returnType: 'attachment', // Valid options: 'buffer' | 'string' | 'attachment' Default: 'attachment'
 *       minify: true, // Minify the result? Uses html-minifier
 *       saveImages: false, // Download all images and include the image data in the HTML (allows viewing the image even after it has been deleted) (! WILL INCREASE FILE SIZE !)
 *       useCDN: false // Uses a CDN to serve discord styles rather than bundling it in the HTML (saves ~8kb when minified)
 *   });
 */
export declare function generateFromMessages<T extends GenerateFromMessagesOpts = {}>(messages: GenerateSource, channel: ValidTextChannels, opts?: T): Promise<ReturnTypeWrapper<T>>;
/**
 * @example
 *   const attachment = await createTranscript(channel, {
 *       limit: -1, // Max amount of messages to fetch.
 *       returnType: 'attachment', // Valid options: 'buffer' | 'string' | 'attachment' Default: 'attachment'
 *       fileName: 'transcript.html', // Only valid with returnBuffer false. Name of attachment.
 *       minify: true, // Minify the result? Uses html-minifier
 *       saveImages: false, // Download all images and include the image data in the HTML (allows viewing the image even after it has been deleted) (! WILL INCREASE FILE SIZE !)
 *       useCDN: false // Uses a CDN to serve discord styles rather than bundling it in HTML (saves ~8kb when minified)
 *   });
 */
export declare function createTranscript<T extends CreateTranscriptOptions = {}>(channel: ValidTextChannels, opts?: T): Promise<ReturnTypeWrapper<T>>;

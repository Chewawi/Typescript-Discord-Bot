/// <reference types="node" />
import type { Collection, Message, DMChannel, PartialDMChannel, TextBasedChannel } from 'discord.js';
import type { AttachmentBuilder } from 'discord.js-14';
export declare type ReturnTypes = 'buffer' | 'string' | 'attachment';
export declare type ObjectType<T> = T extends 'buffer' ? Buffer : T extends 'string' ? string : T extends 'attachment' ? AttachmentBuilder : AttachmentBuilder;
export declare type GenerateFromMessagesOpts = {
    returnType?: ReturnTypes;
    fileName?: string;
    minify?: boolean;
    saveImages?: boolean;
    useCDN?: boolean;
};
export declare type GenerateSource = Collection<string, Message> | Message[];
export declare type CreateTranscriptOptions = GenerateFromMessagesOpts & {
    limit?: number;
};
export declare type internalGenerateOptions = {
    returnBuffer?: boolean;
    returnType?: ReturnTypes;
    fileName?: string;
    minify?: boolean;
    saveImages?: boolean;
    useCDN?: boolean;
};
export declare type ValidTextChannels = Exclude<TextBasedChannel, DMChannel | PartialDMChannel>;
export declare type Class<T> = new (...args: any[]) => T;
export declare type ReturnTypeWrapper<T> = T extends GenerateFromMessagesOpts ? T["returnType"] extends undefined ? AttachmentBuilder : ObjectType<T["returnType"]> : AttachmentBuilder;

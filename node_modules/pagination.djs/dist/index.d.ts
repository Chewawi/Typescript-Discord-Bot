import { ButtonStyle, ComponentEmojiResolvable, ButtonBuilder, APIButtonComponentWithCustomId, BaseMessageOptions, EmbedBuilder, ActionRowBuilder, MessageActionRowComponentBuilder, RestOrArray, APIEmbedField, JSONEncodable, APIEmbed, ButtonInteraction, Interaction, InteractionType, Message, Snowflake, InteractionCollector, InteractionResponse, BaseInteraction, User } from 'discord.js';

/**
 * The style of the paginator buttons.
 */
declare type PButtonStyle = Exclude<ButtonStyle, ButtonStyle.Link>;
/**
 * Pagination Button Options
 */
interface ButtonOptions {
    /**
     * The emoji to use for the button.
     */
    emoji?: ComponentEmojiResolvable;
    /**
     * The text to show on the button.
     *
     * @defaultValue ""
     */
    label?: string;
    /**
     * The style of the button.
     *
     * @defaultValue `PButtonStyle.Secondary`
     */
    style: PButtonStyle;
}
/**
 * Pagination Buttons Options
 */
interface ButtonsOptions {
    /**
     * The first button of the pagination row
     */
    first: ButtonOptions;
    /**
     * The last button of the pagination row
     */
    last: ButtonOptions;
    /**
     * The next button of the pagination row
     */
    next: ButtonOptions;
    /**
     * The previous button of the pagination row
     */
    prev: ButtonOptions;
}
declare type PButtonBuilder = Omit<ButtonBuilder, 'data'> & {
    data: APIButtonComponentWithCustomId;
};

/**
 * Emojis of the pagination buttons
 */
interface EmojiOptions {
    /**
     * The emoji to use for the first button.
     *
     * @defaultValue "⏮"
     */
    firstEmoji: ComponentEmojiResolvable;
    /**
     * The emoji to use for the last button.
     *
     * @defaultValue "⏭"
     */
    lastEmoji: ComponentEmojiResolvable;
    /**
     * The emoji to use for the next button.
     *
     * @defaultValue "▶️"
     */
    nextEmoji: ComponentEmojiResolvable;
    /**
     * The emoji to use for the previous button.
     *
     * @defaultValue "◀️"
     */
    prevEmoji: ComponentEmojiResolvable;
}

/**
 * Labels for the pagination buttons
 */
interface LabelOptions {
    /**
     * The label to use for the first button.
     *
     * @defaultValue ""
     */
    firstLabel: string;
    /**
     * The label to use for the last button.
     *
     * @defaultValue ""
     */
    lastLabel: string;
    /**
     * The label to use for the next button.
     *
     * @defaultValue ""
     */
    nextLabel: string;
    /**
     * The label to use for the previous button.
     *
     * @defaultValue ""
     */
    prevLabel: string;
}

declare type PEmbeds = Required<BaseMessageOptions>['embeds'];
declare type PAttachments = Required<BaseMessageOptions>['files'];
declare enum ExtraRowPosition {
    Above = 0,
    Below = 1
}
/**
 * The options to customize the pagination.
 */
interface Options extends EmojiOptions {
    /**
     * The attachments to show with the paginated messages.
     *
     * @defaultValue []
     */
    attachments: PAttachments;
    /**
     * The style of the paginator buttons.
     *
     * @defaultValue "SECONDARY"
     */
    buttonStyle: PButtonStyle;
    /**
     * Contents if changing contents per page.
     *
     * @defaultValue []
     */
    contents: string[];
    /**
     * Whether the reply should be ephemeral.
     *
     * @defaultValue false
     */
    ephemeral: boolean;
    /**
     * The label for the first page button.
     *
     * @defaultValue ""
     */
    firstLabel: string;
    /**
     * The number of seconds before the paginator will close after inactivity.
     *
     * @defaultValue 5 minutes
     */
    idle: number;
    /**
     * The label for the last page button.
     *
     * @defaultValue ""
     */
    lastLabel: string;
    /**
     * The number of entries to show per page.
     *
     * @defaultValue 5
     */
    limit: number;
    /**
     * loop through the pages.
     *
     * @defaultValue false
     */
    loop: boolean;
    /**
     * The label for the next page button.
     *
     * @defaultValue ""
     */
    nextLabel: string;
    /**
     * The description to show after the paginated descriptions.
     *
     * @defaultValue ""
     */
    postDescription: string;
    /**
     * The description to show before the paginated descriptions.
     *
     * @defaultValue ""
     */
    prevDescription: string;
    /**
     * The label for the previous page button.
     *
     * @defaultValue ""
     */
    prevLabel: string;
}

declare type Payload = BaseMessageOptions & {
    ephemeral?: boolean;
};

/**
 * The PaginationEmbed class.
 */
declare abstract class PaginationEmbed extends EmbedBuilder {
    /**
     * Pagination button infos.
     *
     * @readonly
     * @defaultValue `defaultOptions.buttonInfo`
     */
    readonly buttonInfo: ButtonsOptions;
    /**
     * The images to paginate through.
     */
    images: string[];
    /**
     * The descriptions to paginate through.
     */
    descriptions: string[];
    /**
     * The action rows of the final message.
     */
    actionRows: ActionRowBuilder<MessageActionRowComponentBuilder>[];
    /**
     * The total number of entries.
     */
    totalEntry: number;
    /**
     * The total number of pages.
     */
    totalPages: number;
    /**
     * The current page number.
     */
    currentPage: number;
    /**
     * The limit of entries per page.
     *
     * @defaultValue 5
     */
    limit: number;
    /**
     * The idle time before closing.
     *
     * @defaultValue 5 * 60 * 1_000
     */
    idle: number;
    /**
     * Whether the reply should be ephemeral or not.
     *
     * @defaultValue false
     */
    ephemeral: boolean;
    /**
     * The description to show before the paginated descriptions.
     *
     * @defaultValue ""
     */
    prevDescription: string;
    /**
     * The description to show after the paginated descriptions.
     *
     * @defaultValue ""
     */
    postDescription: string;
    /**
     * Whether to loop through the pages or not.
     *
     * @defaultValue false
     */
    loop: boolean;
    /**
     * The embeds if paginating through embeds.
     *
     * @defaultValue []
     */
    embeds: PEmbeds;
    /**
     * The attachments to show with the paginated messages.
     *
     * @defaultValue []
     */
    attachments: PAttachments;
    /**
     * Whether if paginating through embed's fields.
     *
     * @defaultValue false
     */
    fieldPaginate: boolean;
    /**
     * The pagination buttons.
     */
    buttons: Record<string, PButtonBuilder>;
    /**
     * Contents if changing contents per page.
     *
     * @defaultValue []
     */
    private contents;
    /**
     * The payload of the final message.
     *
     * @readonly
     */
    private readonly payload;
    /**
     * Whether the footer is a custom footer or not.
     *
     */
    private customFooter;
    /**
     * The main action row.
     *
     * @readonly
     */
    private readonly mainActionRow;
    /**
     * All the fields if paginating through fields.
     */
    private rawFields;
    /**
     * The extra action rows to add, if any.
     *
     * @defaultValue []
     */
    private readonly extraRows;
    /**
     * The raw footer text.
     *
     */
    private rawFooter;
    /**
     * Changed default buttons
     *
     */
    private changedButtons?;
    /**
     * @param options - The pagination options
     * @example
     * ```javascript
     * const pagination = new PaginationEmbed({
     *  firstEmoji: "⏮",
     *  prevEmoji: "◀️",
     *  nextEmoji: "▶️",
     *  lastEmoji: "⏭",
     *  limit: 5,
     *  idle: 5 * 60 * 1000,
     *  ephemeral: false,
     *  prevDescription: "",
     *  postDescription: "",
     *  attachments: [],
     *  buttonStyle: ButtonStyle.Secondary,
     *  loop: false,
     * });
     * ```
     */
    constructor(options?: Partial<Options>);
    /**
     * Appends fields to the embed
     *
     * @remarks
     * This method accepts either an array of fields or a variable number of field parameters.
     * The maximum amount of fields that can be added is 25.
     * @example
     * Using an array
     * ```ts
     * const fields: APIEmbedField[] = ...;
     * const pagination = new Pagination(interaction)
     * 	.addFields(fields);
     * ```
     * @example
     * Using rest parameters (variadic)
     * ```ts
     * const pagination = new Pagination(interaction)
     * 	.addFields(
     * 		{ name: 'Field 1', value: 'Value 1' },
     * 		{ name: 'Field 2', value: 'Value 2' },
     * 	);
     * ```
     * @param fields - The fields to add
     */
    addFields(...fields: RestOrArray<APIEmbedField>): this;
    /**
     * Removes, replaces, or inserts fields in the embed.
     *
     * @remarks
     * This method behaves similarly
     * to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice | Array.prototype.splice}.
     * The maximum amount of fields that can be added is 25.
     *
     * It's useful for modifying and adjusting order of the already-existing fields of an embed.
     * @example
     * Remove the first field
     * ```ts
     * pagination.spliceFields(0, 1);
     * ```
     * @example
     * Remove the first n fields
     * ```ts
     * const n = 4
     * pagination.spliceFields(0, n);
     * ```
     * @example
     * Remove the last field
     * ```ts
     * pagination.spliceFields(-1, 1);
     * ```
     * @param index - The index to start at
     * @param deleteCount - The number of fields to remove
     * @param fields - The replacing field objects
     */
    spliceFields(index: number, deleteCount: number, ...fields: APIEmbedField[]): this;
    /**
     * Sets the embed's fields
     *
     * @remarks
     * This method is an alias for {@link PaginationEmbed.spliceFields}. More specifically,
     * it splices the entire array of fields, replacing them with the provided fields.
     *
     * You can set a maximum of 25 fields.
     * @param fields - The fields to set
     */
    setFields(...fields: RestOrArray<APIEmbedField>): this;
    /**
     * Sets the pagination options.
     *
     * @param options - The pagination options
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setOptions({
     *    firstEmoji: "⏮",
     *    prevEmoji: "◀️",
     *    nextEmoji: "▶️",
     *    lastEmoji: "⏭",
     *    limit: 5,
     *    idle: 5 * 60 * 1000,
     *    ephemeral: false,
     *    prevDescription: "",
     *    postDescription: "",
     *    attachments: [],
     *    buttonStyle: ButtonStyle.Secondary,
     *    loop: false,
     *  });
     * ```
     */
    setOptions(options: Partial<Options>): this;
    /**
     * Sets the pagination images.
     *
     * @param images - The images to set
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setImages(["1st image", "2nd image", "3rd image"]);
     * ```
     */
    setImages(...images: RestOrArray<string>): this;
    /**
     * Adds multiple pagination images.
     *
     * @param images - The images to set
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setImages(["1st image", "2nd image", "3rd image"])
     *  .addImages(["4st image", "5nd image", "6rd image"]);
     * ```
     */
    addImages(...images: RestOrArray<string>): this;
    /**
     * Sets the pagination descriptions.
     *
     * @param descriptions - The descriptions to set
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setDescriptions(["1st description", "2nd description", "3rd description"]);
     * ```
     */
    setDescriptions(...descriptions: RestOrArray<string>): this;
    /**
     * Adds multiple pagination descriptions.
     *
     * @param descriptions - The descriptions to set
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setDescriptions(["1st description", "2nd description", "3rd description"])
     *  .addDescriptions(["4st description", "5nd description", "6rd description"]);
     * ```
     */
    addDescriptions(...descriptions: RestOrArray<string>): this;
    /**
     * Sets the pagination embeds.
     * Note: if you set this then all other pagination methods and embed methods will be ignored
     * i.e., descriptions, images, fields, also the embed properties like title, footer and all
     *
     * @param embeds - The embeds to set
     * @param template - A template function that will be called for each embed.
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setEmbeds([new EmbedBuilder(), new EmbedBuilder(), new EmbedBuilder()]);
     * ```
     */
    setEmbeds(embeds: PEmbeds, template?: (embed: EmbedBuilder, i: number, array: PEmbeds) => JSONEncodable<APIEmbed>): this;
    /**
     * Adds multiple pagination embeds.
     *
     * @param embeds - An array of [EmbedBuilder](https://discord.js.org/#/docs/discord.js/main/class/EmbedBuilder)
     *  or [APIEmbed](https://discord-api-types.dev/api/discord-api-types-v10/interface/APIEmbed)
     * @param template - A template function that will be called for each embed.
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setEmbeds([new EmbedBuilder(), new EmbedBuilder(), new EmbedBuilder()])
     *  .addEmbeds([new EmbedBuilder(), new EmbedBuilder(), new EmbedBuilder()]);
     * ```
     */
    addEmbeds(embeds: PEmbeds, template?: (embed: EmbedBuilder) => JSONEncodable<APIEmbed>): this;
    /**
     * Paginates through fields.
     * It will be ignored if you are not paginating through fields.
     *
     * @param paginate - Whether to paginate fields
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setFields([{
     *    name: "Field 1",
     *    value: "Field 1 value",
     *  },
     *  {
     *    name: "Field 2",
     *    value: "Field 2 value",
     *  }])
     *  .paginateFields();
     * ```
     */
    paginateFields(paginate?: boolean): this;
    /**
     * Sets the idle time before closing for the pagination.
     *
     * @param idle - The idle time
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setIdle(5 * 60 * 1000);
     * ```
     */
    setIdle(idle: number): this;
    /**
     * Set whether the pagination reply should be ephemeral or not.
     *
     * @param ephemeral - Whether the reply should be ephemeral
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setEphemeral(true);
     * ```
     */
    setEphemeral(ephemeral?: boolean): this;
    /**
     * Sets the limit of entries per page for pagination.
     *
     * @param limit - Limit of entries per page
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setLimit(5);
     * ```
     */
    setLimit(limit: number): this;
    /**
     * Sets a fixed prev description which will be shown in all pages before the paginated descriptions.
     * It will be ignored if you are not paginating through descriptions.
     *
     * @param prevDescription - The prev description to set
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setPrevDescription("role info");
     * ```
     */
    setPrevDescription(prevDescription: string): this;
    /**
     * Sets a fixed post description which will be shown in all pages after the paginated descriptions.
     * It will be ignored if you are not paginating through descriptions.
     *
     * @param postDescription - The post description to set
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setPostDescription("role id: 123456789");
     * ```
     */
    setPostDescription(postDescription: string): this;
    /**
     * Sets the emojis for the buttons.
     *
     * @param emojiOptions - The emoji options to set
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setEmojis({
     *    firstEmoji: ":first_emoji:",
     *    prevEmoji: ":prev_emoji:",
     *    nextEmoji: ":next_emoji:",
     *    lastEmoji: ":last_emoji:"
     *  });
     * ```
     */
    setEmojis(emojiOptions: Partial<EmojiOptions>): this;
    /**
     * Sets the labels for the buttons.
     *
     * @param labelOptions - The label options to set
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setLabels({
     *    firstLabel: "first",
     *    prevLabel: "prev",
     *    nextLabel: "next",
     *    lastLabel: "last"
     *  });
     * ```
     */
    setLabels(labelOptions: Partial<LabelOptions>): this;
    /**
     * Sets the buttons' style.
     *
     * @param style - The style of the buttons
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setStyle(ButtonStyle.Secondary);
     * ```
     */
    setStyle(style: PButtonStyle): this;
    /**
     * Customizes the styles of each button.
     *
     * @param options - The styles of the buttons
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setButtonAppearance({
     *    first: {
     *      label: "First",
     *      emoji: ":first_emoji:",
     *      style: ButtonStyle.Secondary
     *    }
     *  });
     * ```
     */
    setButtonAppearance(options: ButtonsOptions): this;
    /**
     * Set pagination buttons
     *
     * @param buttons - The buttons to set
     */
    setButtons(buttons?: Record<string, ButtonBuilder>): this;
    /**
     * Adds a custom action row below or above the pagination button action row.
     *
     * @param actionRows - The action rows to add
     * @param position - The position where the action rows to be added
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .addActionRows([new ActionRowBuilder()], ExtraRowPosition.Below);
     * ```
     */
    addActionRows(actionRows: ActionRowBuilder<MessageActionRowComponentBuilder>[], position?: ExtraRowPosition): this;
    /**
     * Sends an attachment along with the embed.
     *
     * @param attachments - The attachments to set
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setAttachments([new AttachmentBuilder()]);
     * ```
     */
    setAttachments(attachments: PAttachments): this;
    /**
     * Adds an attachment to the existing attachments.
     *
     * @param attachment - The attachment to add
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setAttachments([new AttachmentBuilder()])
     *  .addAttachment(new AttachmentBuilder());
     * ```
     */
    addAttachment(attachment: PAttachments[number]): this;
    /**
     * Adds multiple attachments to the existing attachments.
     *
     * @param attachments - The attachments to add
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setAttachments([new AttachmentBuilder()])
     *  .addAttachments([new AttachmentBuilder(), new AttachmentBuilder()]);
     * ```
     */
    addAttachments(attachments: PAttachments): this;
    /**
     * Triggers the pagination to go to a specific page.
     *
     * @param pageNumber - The page number to jump to
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setLimit(1)
     *  .setDescriptions(["1st page", "2nd page", "3rd page", "4th page", "5th page"]);
     * ...
     * pagination.goToPage(2);
     * ```
     */
    goToPage(pageNumber: number): this;
    /**
     * Sends contents along with the embed.
     *
     * @param contents - The contents to send.
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setContents(["this is the first page", "this is the second page"]);
     * ```
     */
    setContents(contents: (string | null)[] | string | null): this;
    /**
     * Prepares the pagination.
     *
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction);
     * ...
     * pagination.ready();
     * ```
     */
    ready(): Payload;
    /**
     * Goes to the first page.
     *
     * @param interaction - The interaction to reply to
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction);
     * ...
     * pagination.goFirst(i);
     * ```
     */
    protected goFirst(interaction: ButtonInteraction): Promise<void>;
    /**
     * Goes to the previous page.
     *
     * @param interaction - The interaction to reply to
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction);
     * ...
     * pagination.goPrev(i);
     * ```
     */
    protected goPrev(interaction: ButtonInteraction): Promise<void>;
    /**
     * Goes to the next page.
     *
     * @param interaction - The interaction to reply to
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction);
     * ...
     * pagination.goNext(i);
     * ```
     */
    protected goNext(interaction: ButtonInteraction): Promise<void>;
    /**
     * Goes to the last page.
     *
     * @param interaction - The interaction to reply to
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction);
     * ...
     * pagination.goLast(i);
     * ```
     */
    protected goLast(interaction: ButtonInteraction): Promise<void>;
    private _readyButton;
    /**
     * Prepare the message's action rows for pagination.
     *
     * @returns
     */
    private _readyActionRows;
    /**
     * Prepare the message's payload.
     */
    private _readyPayloads;
}

/**
 * The pagination class.
 */
declare class Pagination extends PaginationEmbed {
    /**
     * The interaction that the paginator is for.
     *
     * @readonly
     */
    readonly interaction: Exclude<Interaction<'cached'>, {
        type: InteractionType.ApplicationCommandAutocomplete;
    }> | Message;
    /**
     * All the authorized users who can use the pagination buttons
     */
    authorizedUsers: Snowflake[];
    /**
     * The collector of the pagination.
     */
    collector?: InteractionCollector<ButtonInteraction<'cached'>> | InteractionCollector<ButtonInteraction>;
    /**
     * @param messageOrInteraction - The message or interaction to reply with the pagination message
     * @param options - The pagination options
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction, {
     *  firstEmoji: "⏮",
     *  prevEmoji: "◀️",
     *  nextEmoji: "▶️",
     *  lastEmoji: "⏭",
     *  limit: 5,
     *  idle: 5 * 60 * 1000,
     *  ephemeral: false,
     *  prevDescription: "",
     *  postDescription: "",
     *  attachments: [],
     *  buttonStyle: "SECONDARY",
     *  loop: false,
     * });
     * ```
     */
    constructor(messageOrInteraction: Exclude<Interaction<'cached'>, {
        type: InteractionType.ApplicationCommandAutocomplete;
    }> | Message, options?: Partial<Options>);
    /**
     * Sets authorized users who can use these pagination buttons.
     * Leave it a empty array to allow everyone to use the pagination.
     *
     * @param authorizedUsers - The users to set
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .setAuthorizedUsers([userId1, userId2, userId3]);
     * ```
     */
    setAuthorizedUsers(authorizedUsers: Snowflake[]): this;
    /**
     * Adds a authorized user who can use these pagination buttons.
     *
     * @param authorizedUser - The user to add
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .addAuthorizedUser(userId1);
     * ```
     */
    addAuthorizedUser(authorizedUser: Snowflake): this;
    /**
     * Adds multiple authorized users who can use these pagination buttons.
     *
     * @param authorizedUsers - The users to add
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction)
     *  .addAuthorizedUsers([userId1, userId2, userId3]);
     * ```
     */
    addAuthorizedUsers(authorizedUsers: Snowflake[]): this;
    /**
     * Makes the pagination interactive.
     *
     * @param message - The message to listen for interactions
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction);
     * ...
     * pagination.paginate(message);
     * ```
     */
    paginate(message: InteractionResponse<true> | Message): this;
    /**
     * Sends the final message.
     * By default, it will send as a reply to the message
     * but if the interaction is already replied or deferred then it will `editReply`.
     * If you want to send follow-up or update the interaction, then use {@link followUp} or {@link update} instead.
     *
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction);
     * ...
     * pagination.render();
     * ```
     */
    render(): Promise<InteractionResponse<true> | Message>;
    /**
     * Replies the final message.
     *
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction);
     * ...
     * pagination.reply();
     * ```
     */
    reply(): Promise<InteractionResponse<true> | Message>;
    /**
     * Sends the reply as a `followUp`.
     *
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction);
     * ...
     * pagination.followUp();
     * ```
     */
    followUp(): Promise<Message>;
    /**
     * Edits the original reply with the final message.
     *
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction);
     * ...
     * pagination.editReply();
     * ```
     */
    editReply(): Promise<Message>;
    /**
     * Updates the interaction's pagination.
     *
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction);
     * ...
     * pagination.update();
     * ```
     */
    update(): Promise<InteractionResponse<true> | Message>;
    /**
     * Sends the final message in the interaction's channel.
     *
     * @returns
     * @example
     * ```javascript
     * const pagination = new Pagination(interaction);
     * ...
     * pagination.send();
     * ```
     */
    send(): Promise<Message>;
}

declare const authorOrUser: (messageOrInteraction: BaseInteraction | Message) => User;

export { ButtonOptions, ButtonsOptions, EmojiOptions, ExtraRowPosition, LabelOptions, Options, PAttachments, PButtonBuilder, PButtonStyle, PEmbeds, Pagination, PaginationEmbed, Payload, authorOrUser };

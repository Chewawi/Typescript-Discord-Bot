{"version":3,"sources":["../src/lib/pagination/Pagination.ts","../src/lib/pagination/PaginationEmbed.ts","../src/lib/pagination/defaultOptions.ts","../src/lib/types/Options.ts","../src/lib/utils/util.ts"],"names":["ExtraRowPosition"],"mappings":"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","sourcesContent":["import {\n\tBaseInteraction,\n\tComponentType,\n\tMessage,\n\tMessageComponentInteraction,\n\ttype ButtonInteraction,\n\ttype CommandInteraction,\n\ttype InteractionCollector,\n\ttype InteractionType,\n\ttype Snowflake,\n\ttype Interaction,\n\ttype InteractionResponse\n} from 'discord.js';\n\nimport { PaginationEmbed } from './PaginationEmbed.js';\n\nimport { authorOrUser } from '../utils/index.js';\n\nimport type { Options } from '../types';\n\n/**\n * The pagination class.\n */\nexport class Pagination extends PaginationEmbed {\n\t// #region public fields\n\n\t/**\n\t * The interaction that the paginator is for.\n\t *\n\t * @readonly\n\t */\n\tpublic readonly interaction: Exclude<Interaction<'cached'>, { type: InteractionType.ApplicationCommandAutocomplete }> | Message;\n\n\t/**\n\t * All the authorized users who can use the pagination buttons\n\t */\n\tpublic authorizedUsers: Snowflake[];\n\n\t/**\n\t * The collector of the pagination.\n\t */\n\tpublic collector?: InteractionCollector<ButtonInteraction<'cached'>> | InteractionCollector<ButtonInteraction>;\n\n\t// #end region\n\n\t/**\n\t * @param messageOrInteraction - The message or interaction to reply with the pagination message\n\t * @param options - The pagination options\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction, {\n\t *  firstEmoji: \"⏮\",\n\t *  prevEmoji: \"◀️\",\n\t *  nextEmoji: \"▶️\",\n\t *  lastEmoji: \"⏭\",\n\t *  limit: 5,\n\t *  idle: 5 * 60 * 1000,\n\t *  ephemeral: false,\n\t *  prevDescription: \"\",\n\t *  postDescription: \"\",\n\t *  attachments: [],\n\t *  buttonStyle: \"SECONDARY\",\n\t *  loop: false,\n\t * });\n\t * ```\n\t */\n\tpublic constructor(\n\t\tmessageOrInteraction: Exclude<Interaction<'cached'>, { type: InteractionType.ApplicationCommandAutocomplete }> | Message,\n\t\toptions: Partial<Options> = {}\n\t) {\n\t\tsuper(options);\n\t\tif (!(messageOrInteraction instanceof BaseInteraction) && !(messageOrInteraction instanceof Message)) {\n\t\t\tthrow new TypeError('The interaction must be an instance of Interaction or Message');\n\t\t}\n\n\t\tthis.interaction = messageOrInteraction;\n\t\tthis.authorizedUsers = [authorOrUser(messageOrInteraction).id];\n\t}\n\n\t// #region authorized users related\n\n\t/**\n\t * Sets authorized users who can use these pagination buttons.\n\t * Leave it a empty array to allow everyone to use the pagination.\n\t *\n\t * @param authorizedUsers - The users to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setAuthorizedUsers([userId1, userId2, userId3]);\n\t * ```\n\t */\n\tpublic setAuthorizedUsers(authorizedUsers: Snowflake[]): this {\n\t\tthis.authorizedUsers = authorizedUsers;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a authorized user who can use these pagination buttons.\n\t *\n\t * @param authorizedUser - The user to add\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .addAuthorizedUser(userId1);\n\t * ```\n\t */\n\tpublic addAuthorizedUser(authorizedUser: Snowflake): this {\n\t\tthis.authorizedUsers.push(authorizedUser);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds multiple authorized users who can use these pagination buttons.\n\t *\n\t * @param authorizedUsers - The users to add\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .addAuthorizedUsers([userId1, userId2, userId3]);\n\t * ```\n\t */\n\tpublic addAuthorizedUsers(authorizedUsers: Snowflake[]): this {\n\t\tthis.authorizedUsers.push(...authorizedUsers);\n\t\treturn this;\n\t}\n\n\t// #end region\n\n\t/**\n\t * Makes the pagination interactive.\n\t *\n\t * @param message - The message to listen for interactions\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.paginate(message);\n\t * ```\n\t */\n\tpublic paginate(message: InteractionResponse<true> | Message): this {\n\t\tthis.collector = message.createMessageComponentCollector({\n\t\t\tfilter: ({ customId, user }) =>\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\t\t\t\t['first', 'prev', 'next', 'last'].some((position) => this.buttons[position]?.data.custom_id === customId) &&\n\t\t\t\t(this.authorizedUsers.length ? this.authorizedUsers.includes(user.id) : true),\n\t\t\tidle: this.idle,\n\t\t\tcomponentType: ComponentType.Button\n\t\t});\n\n\t\tthis.collector.on('collect', (interaction) => {\n\t\t\tif (interaction.customId === this.buttons.first.data.custom_id) {\n\t\t\t\treturn this.goFirst(interaction);\n\t\t\t}\n\n\t\t\tif (interaction.customId === this.buttons.prev.data.custom_id) {\n\t\t\t\treturn this.goPrev(interaction);\n\t\t\t}\n\n\t\t\tif (interaction.customId === this.buttons.next.data.custom_id) {\n\t\t\t\treturn this.goNext(interaction);\n\t\t\t}\n\n\t\t\treturn this.goLast(interaction);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sends the final message.\n\t * By default, it will send as a reply to the message\n\t * but if the interaction is already replied or deferred then it will `editReply`.\n\t * If you want to send follow-up or update the interaction, then use {@link followUp} or {@link update} instead.\n\t *\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.render();\n\t * ```\n\t */\n\tpublic async render(): Promise<InteractionResponse<true> | Message> {\n\t\tif (this.interaction instanceof BaseInteraction && (this.interaction.replied || this.interaction.deferred)) {\n\t\t\treturn this.editReply();\n\t\t}\n\n\t\treturn this.reply();\n\t}\n\n\t/**\n\t * Replies the final message.\n\t *\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.reply();\n\t * ```\n\t */\n\tpublic async reply(): Promise<InteractionResponse<true> | Message> {\n\t\tconst payload = this.ready();\n\t\tconst message = await (this.interaction as unknown as CommandInteraction<'cached'>).reply(payload);\n\t\tthis.paginate(message);\n\t\treturn message;\n\t}\n\n\t/**\n\t * Sends the reply as a `followUp`.\n\t *\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.followUp();\n\t * ```\n\t */\n\tpublic async followUp(): Promise<Message> {\n\t\tconst payload = this.ready();\n\t\tif (!(this.interaction instanceof BaseInteraction)) throw new TypeError('The interaction is not an instance of Interaction');\n\t\tconst message = await this.interaction.followUp(payload);\n\t\tthis.paginate(message);\n\t\treturn message;\n\t}\n\n\t/**\n\t * Edits the original reply with the final message.\n\t *\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.editReply();\n\t * ```\n\t */\n\tpublic async editReply(): Promise<Message> {\n\t\tconst payload = this.ready();\n\t\tif (!(this.interaction instanceof BaseInteraction)) throw new TypeError('The interaction is not an instance of Interaction');\n\t\tconst message = await this.interaction.editReply(payload);\n\t\tthis.paginate(message);\n\t\treturn message;\n\t}\n\n\t/**\n\t * Updates the interaction's pagination.\n\t *\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.update();\n\t * ```\n\t */\n\tpublic async update(): Promise<InteractionResponse<true> | Message> {\n\t\tconst payload = this.ready();\n\t\tif (!(this.interaction instanceof MessageComponentInteraction))\n\t\t\tthrow new TypeError('The interaction is not an instance of MessageComponentInteraction');\n\t\tconst message = await this.interaction.update(payload);\n\t\tthis.paginate(message);\n\t\treturn message;\n\t}\n\n\t/**\n\t * Sends the final message in the interaction's channel.\n\t *\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.send();\n\t * ```\n\t */\n\tpublic async send(): Promise<Message> {\n\t\tconst payload = this.ready();\n\t\tif (!this.interaction.channel) throw new TypeError(\"The interaction or message don't have a channel\");\n\t\tconst message = await this.interaction.channel.send(payload);\n\t\tthis.paginate(message);\n\t\treturn message;\n\t}\n}\n","import {\n\tActionRowBuilder,\n\tButtonBuilder,\n\tEmbedBuilder,\n\tnormalizeArray,\n\ttype APIEmbed,\n\ttype APIEmbedField,\n\ttype ButtonInteraction,\n\ttype ComponentEmojiResolvable,\n\ttype JSONEncodable,\n\ttype MessageActionRowComponentBuilder,\n\ttype RestOrArray\n} from 'discord.js';\n\nimport { defaultOptions } from './defaultOptions.js';\n\nimport {\n\tExtraRowPosition,\n\ttype ButtonsOptions,\n\ttype EmojiOptions,\n\ttype LabelOptions,\n\ttype Options,\n\ttype PAttachments,\n\ttype Payload,\n\ttype PButtonBuilder,\n\ttype PButtonStyle,\n\ttype PEmbeds\n} from '../types/index.js';\n\n/**\n * The PaginationEmbed class.\n */\nexport abstract class PaginationEmbed extends EmbedBuilder {\n\t/**\n\t * Pagination button infos.\n\t *\n\t * @readonly\n\t * @defaultValue `defaultOptions.buttonInfo`\n\t */\n\tpublic readonly buttonInfo: ButtonsOptions;\n\n\t/**\n\t * The images to paginate through.\n\t */\n\tpublic images: string[];\n\n\t/**\n\t * The descriptions to paginate through.\n\t */\n\tpublic descriptions: string[];\n\n\t/**\n\t * The action rows of the final message.\n\t */\n\tpublic actionRows: ActionRowBuilder<MessageActionRowComponentBuilder>[];\n\n\t/**\n\t * The total number of entries.\n\t */\n\tpublic totalEntry: number;\n\n\t/**\n\t * The total number of pages.\n\t */\n\tpublic totalPages: number;\n\n\t/**\n\t * The current page number.\n\t */\n\tpublic currentPage!: number;\n\n\t/**\n\t * The limit of entries per page.\n\t *\n\t * @defaultValue 5\n\t */\n\tpublic limit!: number;\n\n\t/**\n\t * The idle time before closing.\n\t *\n\t * @defaultValue 5 * 60 * 1_000\n\t */\n\tpublic idle!: number;\n\n\t/**\n\t * Whether the reply should be ephemeral or not.\n\t *\n\t * @defaultValue false\n\t */\n\tpublic ephemeral!: boolean;\n\n\t/**\n\t * The description to show before the paginated descriptions.\n\t *\n\t * @defaultValue \"\"\n\t */\n\tpublic prevDescription!: string;\n\n\t/**\n\t * The description to show after the paginated descriptions.\n\t *\n\t * @defaultValue \"\"\n\t */\n\tpublic postDescription!: string;\n\n\t/**\n\t * Whether to loop through the pages or not.\n\t *\n\t * @defaultValue false\n\t */\n\tpublic loop!: boolean;\n\n\t/**\n\t * The embeds if paginating through embeds.\n\t *\n\t * @defaultValue []\n\t */\n\tpublic embeds: PEmbeds;\n\n\t/**\n\t * The attachments to show with the paginated messages.\n\t *\n\t * @defaultValue []\n\t */\n\tpublic attachments!: PAttachments;\n\n\t/**\n\t * Whether if paginating through embed's fields.\n\t *\n\t * @defaultValue false\n\t */\n\tpublic fieldPaginate!: boolean;\n\n\t/**\n\t * The pagination buttons.\n\t */\n\tpublic buttons!: Record<string, PButtonBuilder>;\n\n\t/**\n\t * Contents if changing contents per page.\n\t *\n\t * @defaultValue []\n\t */\n\tprivate contents!: (string | null)[] | string | null;\n\n\t/**\n\t * The payload of the final message.\n\t *\n\t * @readonly\n\t */\n\tprivate readonly payload: Payload;\n\n\t/**\n\t * Whether the footer is a custom footer or not.\n\t *\n\t */\n\tprivate customFooter: boolean;\n\n\t/**\n\t * The main action row.\n\t *\n\t * @readonly\n\t */\n\tprivate readonly mainActionRow: ActionRowBuilder<MessageActionRowComponentBuilder>;\n\n\t/**\n\t * All the fields if paginating through fields.\n\t */\n\tprivate rawFields: APIEmbedField[];\n\n\t/**\n\t * The extra action rows to add, if any.\n\t *\n\t * @defaultValue []\n\t */\n\tprivate readonly extraRows: {\n\t\tposition: ExtraRowPosition;\n\t\trows: ActionRowBuilder<MessageActionRowComponentBuilder>[];\n\t}[];\n\n\t/**\n\t * The raw footer text.\n\t *\n\t */\n\tprivate rawFooter!: string;\n\n\t/**\n\t * Changed default buttons\n\t *\n\t */\n\tprivate changedButtons?: boolean;\n\n\t/**\n\t * @param options - The pagination options\n\t * @example\n\t * ```javascript\n\t * const pagination = new PaginationEmbed({\n\t *  firstEmoji: \"⏮\",\n\t *  prevEmoji: \"◀️\",\n\t *  nextEmoji: \"▶️\",\n\t *  lastEmoji: \"⏭\",\n\t *  limit: 5,\n\t *  idle: 5 * 60 * 1000,\n\t *  ephemeral: false,\n\t *  prevDescription: \"\",\n\t *  postDescription: \"\",\n\t *  attachments: [],\n\t *  buttonStyle: ButtonStyle.Secondary,\n\t *  loop: false,\n\t * });\n\t * ```\n\t */\n\tpublic constructor(options: Partial<Options> = {}) {\n\t\tsuper();\n\t\tconst mergedOptions = { ...defaultOptions, ...options };\n\t\tthis.buttonInfo = {\n\t\t\tfirst: {\n\t\t\t\temoji: mergedOptions.firstEmoji,\n\t\t\t\tlabel: mergedOptions.firstLabel,\n\t\t\t\tstyle: mergedOptions.buttonStyle\n\t\t\t},\n\t\t\tprev: {\n\t\t\t\temoji: mergedOptions.prevEmoji,\n\t\t\t\tlabel: mergedOptions.prevLabel,\n\t\t\t\tstyle: mergedOptions.buttonStyle\n\t\t\t},\n\t\t\tnext: {\n\t\t\t\temoji: mergedOptions.nextEmoji,\n\t\t\t\tlabel: mergedOptions.nextLabel,\n\t\t\t\tstyle: mergedOptions.buttonStyle\n\t\t\t},\n\t\t\tlast: {\n\t\t\t\temoji: mergedOptions.lastEmoji,\n\t\t\t\tlabel: mergedOptions.lastLabel,\n\t\t\t\tstyle: mergedOptions.buttonStyle\n\t\t\t}\n\t\t};\n\t\tthis.images = [];\n\t\tthis.descriptions = [];\n\t\tthis.embeds = [];\n\t\tthis.actionRows = [];\n\t\tthis.payload = {};\n\t\tthis.totalEntry = 0;\n\t\tthis.totalPages = 0;\n\t\tthis.currentPage = 1;\n\t\tthis.customFooter = true;\n\t\tthis.rawFields = [];\n\t\tthis.mainActionRow = new ActionRowBuilder();\n\t\tthis.extraRows = [];\n\t\tthis.setOptions(mergedOptions);\n\t}\n\n\t/**\n\t * Appends fields to the embed\n\t *\n\t * @remarks\n\t * This method accepts either an array of fields or a variable number of field parameters.\n\t * The maximum amount of fields that can be added is 25.\n\t * @example\n\t * Using an array\n\t * ```ts\n\t * const fields: APIEmbedField[] = ...;\n\t * const pagination = new Pagination(interaction)\n\t * \t.addFields(fields);\n\t * ```\n\t * @example\n\t * Using rest parameters (variadic)\n\t * ```ts\n\t * const pagination = new Pagination(interaction)\n\t * \t.addFields(\n\t * \t\t{ name: 'Field 1', value: 'Value 1' },\n\t * \t\t{ name: 'Field 2', value: 'Value 2' },\n\t * \t);\n\t * ```\n\t * @param fields - The fields to add\n\t */\n\tpublic override addFields(...fields: RestOrArray<APIEmbedField>): this {\n\t\tthis.rawFields.push(...normalizeArray(fields));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes, replaces, or inserts fields in the embed.\n\t *\n\t * @remarks\n\t * This method behaves similarly\n\t * to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice | Array.prototype.splice}.\n\t * The maximum amount of fields that can be added is 25.\n\t *\n\t * It's useful for modifying and adjusting order of the already-existing fields of an embed.\n\t * @example\n\t * Remove the first field\n\t * ```ts\n\t * pagination.spliceFields(0, 1);\n\t * ```\n\t * @example\n\t * Remove the first n fields\n\t * ```ts\n\t * const n = 4\n\t * pagination.spliceFields(0, n);\n\t * ```\n\t * @example\n\t * Remove the last field\n\t * ```ts\n\t * pagination.spliceFields(-1, 1);\n\t * ```\n\t * @param index - The index to start at\n\t * @param deleteCount - The number of fields to remove\n\t * @param fields - The replacing field objects\n\t */\n\tpublic spliceFields(index: number, deleteCount: number, ...fields: APIEmbedField[]): this {\n\t\tif (this.data.fields) this.data.fields.splice(index, deleteCount, ...fields);\n\t\telse this.data.fields = fields;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the embed's fields\n\t *\n\t * @remarks\n\t * This method is an alias for {@link PaginationEmbed.spliceFields}. More specifically,\n\t * it splices the entire array of fields, replacing them with the provided fields.\n\t *\n\t * You can set a maximum of 25 fields.\n\t * @param fields - The fields to set\n\t */\n\tpublic override setFields(...fields: RestOrArray<APIEmbedField>): this {\n\t\tthis.rawFields = normalizeArray(fields);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the pagination options.\n\t *\n\t * @param options - The pagination options\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setOptions({\n\t *    firstEmoji: \"⏮\",\n\t *    prevEmoji: \"◀️\",\n\t *    nextEmoji: \"▶️\",\n\t *    lastEmoji: \"⏭\",\n\t *    limit: 5,\n\t *    idle: 5 * 60 * 1000,\n\t *    ephemeral: false,\n\t *    prevDescription: \"\",\n\t *    postDescription: \"\",\n\t *    attachments: [],\n\t *    buttonStyle: ButtonStyle.Secondary,\n\t *    loop: false,\n\t *  });\n\t * ```\n\t */\n\tpublic setOptions(options: Partial<Options>): this {\n\t\tthis.setEmojis({\n\t\t\tfirstEmoji: options.firstEmoji,\n\t\t\tprevEmoji: options.prevEmoji,\n\t\t\tnextEmoji: options.nextEmoji,\n\t\t\tlastEmoji: options.lastEmoji\n\t\t});\n\t\tif (options.buttonStyle) this.setStyle(options.buttonStyle);\n\t\tthis.setLabels({\n\t\t\tfirstLabel: options.firstLabel,\n\t\t\tprevLabel: options.prevLabel,\n\t\t\tnextLabel: options.nextLabel,\n\t\t\tlastLabel: options.lastLabel\n\t\t});\n\t\tthis.limit = options.limit ?? this.limit;\n\t\tthis.idle = options.idle ?? this.idle;\n\t\tthis.ephemeral = options.ephemeral ?? this.ephemeral;\n\t\tthis.loop = options.loop ?? this.loop;\n\t\tthis.prevDescription = typeof options.prevDescription === 'string' ? options.prevDescription : this.prevDescription;\n\t\tthis.postDescription = typeof options.postDescription === 'string' ? options.postDescription : this.postDescription;\n\t\tthis.attachments = options.attachments ?? this.attachments;\n\t\tthis.contents = options.contents ?? this.contents;\n\t\tthis.setButtons();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the pagination images.\n\t *\n\t * @param images - The images to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setImages([\"1st image\", \"2nd image\", \"3rd image\"]);\n\t * ```\n\t */\n\tpublic setImages(...images: RestOrArray<string>): this {\n\t\tthis.images = normalizeArray(images);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds multiple pagination images.\n\t *\n\t * @param images - The images to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setImages([\"1st image\", \"2nd image\", \"3rd image\"])\n\t *  .addImages([\"4st image\", \"5nd image\", \"6rd image\"]);\n\t * ```\n\t */\n\tpublic addImages(...images: RestOrArray<string>): this {\n\t\tthis.images.push(...normalizeArray(images));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the pagination descriptions.\n\t *\n\t * @param descriptions - The descriptions to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setDescriptions([\"1st description\", \"2nd description\", \"3rd description\"]);\n\t * ```\n\t */\n\tpublic setDescriptions(...descriptions: RestOrArray<string>): this {\n\t\tthis.descriptions = normalizeArray(descriptions);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds multiple pagination descriptions.\n\t *\n\t * @param descriptions - The descriptions to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setDescriptions([\"1st description\", \"2nd description\", \"3rd description\"])\n\t *  .addDescriptions([\"4st description\", \"5nd description\", \"6rd description\"]);\n\t * ```\n\t */\n\tpublic addDescriptions(...descriptions: RestOrArray<string>): this {\n\t\tthis.descriptions.push(...normalizeArray(descriptions));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the pagination embeds.\n\t * Note: if you set this then all other pagination methods and embed methods will be ignored\n\t * i.e., descriptions, images, fields, also the embed properties like title, footer and all\n\t *\n\t * @param embeds - The embeds to set\n\t * @param template - A template function that will be called for each embed.\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setEmbeds([new EmbedBuilder(), new EmbedBuilder(), new EmbedBuilder()]);\n\t * ```\n\t */\n\tpublic setEmbeds(embeds: PEmbeds, template?: (embed: EmbedBuilder, i: number, array: PEmbeds) => JSONEncodable<APIEmbed>): this {\n\t\tif (template) {\n\t\t\tembeds = embeds.map((embed, index, array) => template(embed instanceof EmbedBuilder ? embed : EmbedBuilder.from(embed), index, array));\n\t\t}\n\n\t\tthis.embeds = embeds;\n\t\tthis.limit = 1;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds multiple pagination embeds.\n\t *\n\t * @param embeds - An array of [EmbedBuilder](https://discord.js.org/#/docs/discord.js/main/class/EmbedBuilder)\n\t *  or [APIEmbed](https://discord-api-types.dev/api/discord-api-types-v10/interface/APIEmbed)\n\t * @param template - A template function that will be called for each embed.\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setEmbeds([new EmbedBuilder(), new EmbedBuilder(), new EmbedBuilder()])\n\t *  .addEmbeds([new EmbedBuilder(), new EmbedBuilder(), new EmbedBuilder()]);\n\t * ```\n\t */\n\tpublic addEmbeds(embeds: PEmbeds, template?: (embed: EmbedBuilder) => JSONEncodable<APIEmbed>): this {\n\t\tif (template) {\n\t\t\tembeds = embeds.map((embed) => template(EmbedBuilder.from(embed)));\n\t\t}\n\n\t\tthis.embeds.push(...embeds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Paginates through fields.\n\t * It will be ignored if you are not paginating through fields.\n\t *\n\t * @param paginate - Whether to paginate fields\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setFields([{\n\t *    name: \"Field 1\",\n\t *    value: \"Field 1 value\",\n\t *  },\n\t *  {\n\t *    name: \"Field 2\",\n\t *    value: \"Field 2 value\",\n\t *  }])\n\t *  .paginateFields();\n\t * ```\n\t */\n\tpublic paginateFields(paginate = true): this {\n\t\tthis.fieldPaginate = paginate;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the idle time before closing for the pagination.\n\t *\n\t * @param idle - The idle time\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setIdle(5 * 60 * 1000);\n\t * ```\n\t */\n\tpublic setIdle(idle: number): this {\n\t\tthis.idle = idle;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set whether the pagination reply should be ephemeral or not.\n\t *\n\t * @param ephemeral - Whether the reply should be ephemeral\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setEphemeral(true);\n\t * ```\n\t */\n\tpublic setEphemeral(ephemeral = true): this {\n\t\tthis.ephemeral = ephemeral;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the limit of entries per page for pagination.\n\t *\n\t * @param limit - Limit of entries per page\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setLimit(5);\n\t * ```\n\t */\n\tpublic setLimit(limit: number): this {\n\t\tthis.limit = limit;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a fixed prev description which will be shown in all pages before the paginated descriptions.\n\t * It will be ignored if you are not paginating through descriptions.\n\t *\n\t * @param prevDescription - The prev description to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setPrevDescription(\"role info\");\n\t * ```\n\t */\n\tpublic setPrevDescription(prevDescription: string): this {\n\t\tthis.prevDescription = prevDescription;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a fixed post description which will be shown in all pages after the paginated descriptions.\n\t * It will be ignored if you are not paginating through descriptions.\n\t *\n\t * @param postDescription - The post description to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setPostDescription(\"role id: 123456789\");\n\t * ```\n\t */\n\tpublic setPostDescription(postDescription: string): this {\n\t\tthis.postDescription = postDescription;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the emojis for the buttons.\n\t *\n\t * @param emojiOptions - The emoji options to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setEmojis({\n\t *    firstEmoji: \":first_emoji:\",\n\t *    prevEmoji: \":prev_emoji:\",\n\t *    nextEmoji: \":next_emoji:\",\n\t *    lastEmoji: \":last_emoji:\"\n\t *  });\n\t * ```\n\t */\n\tpublic setEmojis(emojiOptions: Partial<EmojiOptions>): this {\n\t\tthis.buttonInfo.first.emoji = emojiOptions.firstEmoji ?? this.buttonInfo.first.emoji;\n\t\tthis.buttonInfo.prev.emoji = emojiOptions.prevEmoji ?? this.buttonInfo.prev.emoji;\n\t\tthis.buttonInfo.next.emoji = emojiOptions.nextEmoji ?? this.buttonInfo.next.emoji;\n\t\tthis.buttonInfo.last.emoji = emojiOptions.lastEmoji ?? this.buttonInfo.last.emoji;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the labels for the buttons.\n\t *\n\t * @param labelOptions - The label options to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setLabels({\n\t *    firstLabel: \"first\",\n\t *    prevLabel: \"prev\",\n\t *    nextLabel: \"next\",\n\t *    lastLabel: \"last\"\n\t *  });\n\t * ```\n\t */\n\tpublic setLabels(labelOptions: Partial<LabelOptions>): this {\n\t\tthis.buttonInfo.first.label = labelOptions.firstLabel ?? this.buttonInfo.first.label;\n\t\tthis.buttonInfo.prev.label = labelOptions.prevLabel ?? this.buttonInfo.prev.label;\n\t\tthis.buttonInfo.next.label = labelOptions.nextLabel ?? this.buttonInfo.next.label;\n\t\tthis.buttonInfo.last.label = labelOptions.lastLabel ?? this.buttonInfo.last.label;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the buttons' style.\n\t *\n\t * @param style - The style of the buttons\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setStyle(ButtonStyle.Secondary);\n\t * ```\n\t */\n\tpublic setStyle(style: PButtonStyle): this {\n\t\tthis.buttonInfo.first.style = style;\n\t\tthis.buttonInfo.prev.style = style;\n\t\tthis.buttonInfo.next.style = style;\n\t\tthis.buttonInfo.last.style = style;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Customizes the styles of each button.\n\t *\n\t * @param options - The styles of the buttons\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setButtonAppearance({\n\t *    first: {\n\t *      label: \"First\",\n\t *      emoji: \":first_emoji:\",\n\t *      style: ButtonStyle.Secondary\n\t *    }\n\t *  });\n\t * ```\n\t */\n\tpublic setButtonAppearance(options: ButtonsOptions): this {\n\t\tconst { first, prev, next, last } = options;\n\t\tthis.buttonInfo.first.label = first.label ?? this.buttonInfo.first.label;\n\t\tthis.buttonInfo.prev.label = prev.label ?? this.buttonInfo.prev.label;\n\t\tthis.buttonInfo.next.label = next.label ?? this.buttonInfo.next.label;\n\t\tthis.buttonInfo.last.label = last.label ?? this.buttonInfo.last.label;\n\n\t\tthis.buttonInfo.first.emoji = first.emoji ?? this.buttonInfo.first.emoji;\n\t\tthis.buttonInfo.prev.emoji = prev.emoji ?? this.buttonInfo.prev.emoji;\n\t\tthis.buttonInfo.next.emoji = next.emoji ?? this.buttonInfo.next.emoji;\n\t\tthis.buttonInfo.last.emoji = last.emoji ?? this.buttonInfo.last.emoji;\n\n\t\t/* eslint-disable @typescript-eslint/no-unnecessary-condition */\n\t\tthis.buttonInfo.first.style = first.style ?? this.buttonInfo.first.style;\n\t\tthis.buttonInfo.prev.style = prev.style ?? this.buttonInfo.prev.style;\n\t\tthis.buttonInfo.next.style = next.style ?? this.buttonInfo.next.style;\n\t\tthis.buttonInfo.last.style = last.style ?? this.buttonInfo.last.style;\n\t\t/* eslint-enable @typescript-eslint/no-unnecessary-condition */\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set pagination buttons\n\t *\n\t * @param buttons - The buttons to set\n\t */\n\n\tpublic setButtons(buttons?: Record<string, ButtonBuilder>) {\n\t\tif (buttons) this.changedButtons = true;\n\t\tthis.buttons = (buttons ?? {\n\t\t\tfirst: new ButtonBuilder().setCustomId('paginate-first'),\n\t\t\tprev: new ButtonBuilder().setCustomId('paginate-prev'),\n\t\t\tnext: new ButtonBuilder().setCustomId('paginate-next'),\n\t\t\tlast: new ButtonBuilder().setCustomId('paginate-last')\n\t\t}) as Record<string, PButtonBuilder>;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a custom action row below or above the pagination button action row.\n\t *\n\t * @param actionRows - The action rows to add\n\t * @param position - The position where the action rows to be added\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .addActionRows([new ActionRowBuilder()], ExtraRowPosition.Below);\n\t * ```\n\t */\n\tpublic addActionRows(actionRows: ActionRowBuilder<MessageActionRowComponentBuilder>[], position = ExtraRowPosition.Below): this {\n\t\tthis.extraRows.push({\n\t\t\trows: actionRows,\n\t\t\tposition\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sends an attachment along with the embed.\n\t *\n\t * @param attachments - The attachments to set\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setAttachments([new AttachmentBuilder()]);\n\t * ```\n\t */\n\tpublic setAttachments(attachments: PAttachments): this {\n\t\tthis.attachments = attachments;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds an attachment to the existing attachments.\n\t *\n\t * @param attachment - The attachment to add\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setAttachments([new AttachmentBuilder()])\n\t *  .addAttachment(new AttachmentBuilder());\n\t * ```\n\t */\n\tpublic addAttachment(attachment: PAttachments[number]): this {\n\t\tthis.attachments.push(attachment);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds multiple attachments to the existing attachments.\n\t *\n\t * @param attachments - The attachments to add\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setAttachments([new AttachmentBuilder()])\n\t *  .addAttachments([new AttachmentBuilder(), new AttachmentBuilder()]);\n\t * ```\n\t */\n\tpublic addAttachments(attachments: PAttachments): this {\n\t\tthis.attachments.push(...attachments);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Triggers the pagination to go to a specific page.\n\t *\n\t * @param pageNumber - The page number to jump to\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setLimit(1)\n\t *  .setDescriptions([\"1st page\", \"2nd page\", \"3rd page\", \"4th page\", \"5th page\"]);\n\t * ...\n\t * pagination.goToPage(2);\n\t * ```\n\t */\n\tpublic goToPage(pageNumber: number): this {\n\t\tif (pageNumber < 1) pageNumber = this.totalPages;\n\t\tif (pageNumber > this.totalPages) pageNumber = 1;\n\t\tthis.currentPage = pageNumber;\n\t\tif (this.embeds.length) {\n\t\t\tconst embed = this.embeds[this.currentPage - 1];\n\t\t\tthis.payload.embeds = [EmbedBuilder.from(embed)];\n\t\t\treturn this;\n\t\t}\n\n\t\tif (!this.data.footer) {\n\t\t\tthis.customFooter = false;\n\t\t\tthis.rawFooter = 'Pages: {pageNumber}/{totalPages}';\n\t\t} else if (this.customFooter && !this.rawFooter) {\n\t\t\tthis.rawFooter = this.data.footer.text;\n\t\t}\n\n\t\tthis.setFooter({\n\t\t\ttext: this.rawFooter.replace(/{pageNumber}/g, `${pageNumber}`).replace(/{totalPages}/g, `${this.totalPages}`),\n\t\t\ticonURL: this.data.footer?.icon_url\n\t\t});\n\t\tif (this.images.length) {\n\t\t\tthis.setImage(this.images[pageNumber - 1]);\n\t\t}\n\n\t\t// TODO: remove null from content in a next major version. Djs changed the typings in a minor version.\n\t\tthis.payload.content = (Array.isArray(this.contents) ? this.contents[this.currentPage - 1] : this.contents) ?? undefined;\n\t\tif (this.descriptions.length) {\n\t\t\tthis.setDescription(\n\t\t\t\t`${this.prevDescription}\\n` +\n\t\t\t\t\t`${this.descriptions.slice(pageNumber * this.limit - this.limit, pageNumber * this.limit).join('\\n')}\\n${this.postDescription}`\n\t\t\t);\n\t\t}\n\n\t\tif (this.fieldPaginate) {\n\t\t\tsuper.setFields(this.rawFields.slice(pageNumber * this.limit - this.limit, pageNumber * this.limit));\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sends contents along with the embed.\n\t *\n\t * @param contents - The contents to send.\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction)\n\t *  .setContents([\"this is the first page\", \"this is the second page\"]);\n\t * ```\n\t */\n\tpublic setContents(contents: (string | null)[] | string | null): this {\n\t\tthis.contents = contents;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Prepares the pagination.\n\t *\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.ready();\n\t * ```\n\t */\n\tpublic ready(): Payload {\n\t\tif (!this.fieldPaginate) {\n\t\t\tthis.setFields(this.rawFields);\n\t\t}\n\n\t\tthis.totalEntry =\n\t\t\tthis.embeds.length || Math.max(this.descriptions.length, this.images.length, this.fieldPaginate ? this.rawFields.length : 0);\n\t\tthis.totalPages = Math.ceil(this.totalEntry / this.limit);\n\t\tthis._readyPayloads();\n\t\tthis.goToPage(this.currentPage);\n\t\treturn this.payload;\n\t}\n\n\t/**\n\t * Goes to the first page.\n\t *\n\t * @param interaction - The interaction to reply to\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.goFirst(i);\n\t * ```\n\t */\n\tprotected async goFirst(interaction: ButtonInteraction) {\n\t\tthis.currentPage = 1;\n\t\tif (!this.loop) {\n\t\t\tthis.buttons.first.setDisabled();\n\t\t\tthis.buttons.prev.setDisabled();\n\t\t}\n\n\t\tthis.buttons.next.setDisabled(false);\n\t\tthis.buttons.last.setDisabled(false);\n\n\t\tthis.goToPage(1);\n\n\t\tawait interaction.update(this.payload);\n\t}\n\n\t/**\n\t * Goes to the previous page.\n\t *\n\t * @param interaction - The interaction to reply to\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.goPrev(i);\n\t * ```\n\t */\n\tprotected async goPrev(interaction: ButtonInteraction) {\n\t\tthis.currentPage--;\n\t\tif (!this.loop) {\n\t\t\tthis.buttons.first.setDisabled(this.currentPage === 1);\n\t\t\tthis.buttons.prev.setDisabled(this.currentPage === 1);\n\t\t}\n\n\t\tthis.buttons.next.setDisabled(false);\n\t\tthis.buttons.last.setDisabled(false);\n\t\tthis.goToPage(this.currentPage);\n\t\tawait interaction.update(this.payload);\n\t}\n\n\t/**\n\t * Goes to the next page.\n\t *\n\t * @param interaction - The interaction to reply to\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.goNext(i);\n\t * ```\n\t */\n\tprotected async goNext(interaction: ButtonInteraction) {\n\t\tthis.currentPage++;\n\t\tthis.buttons.prev.setDisabled(false);\n\t\tthis.buttons.first.setDisabled(false);\n\t\tif (!this.loop) {\n\t\t\tthis.buttons.next.setDisabled(this.currentPage === Math.ceil(this.totalEntry / this.limit));\n\t\t\tthis.buttons.last.setDisabled(this.currentPage === Math.ceil(this.totalEntry / this.limit));\n\t\t}\n\n\t\tthis.goToPage(this.currentPage);\n\t\tawait interaction.update(this.payload);\n\t}\n\n\t/**\n\t * Goes to the last page.\n\t *\n\t * @param interaction - The interaction to reply to\n\t * @returns\n\t * @example\n\t * ```javascript\n\t * const pagination = new Pagination(interaction);\n\t * ...\n\t * pagination.goLast(i);\n\t * ```\n\t */\n\tprotected async goLast(interaction: ButtonInteraction) {\n\t\tthis.currentPage = Math.ceil(this.totalEntry / this.limit);\n\t\tthis.buttons.prev.setDisabled(false);\n\t\tthis.buttons.first.setDisabled(false);\n\t\tif (!this.loop) {\n\t\t\tthis.buttons.next.setDisabled();\n\t\t\tthis.buttons.last.setDisabled();\n\t\t}\n\n\t\tthis.goToPage(this.currentPage);\n\t\tawait interaction.update(this.payload);\n\t}\n\n\tprivate _readyButton(button: ButtonBuilder, label: string | undefined, emoji: ComponentEmojiResolvable | undefined, style: PButtonStyle): this {\n\t\tif (label) button.setLabel(label);\n\t\tif (emoji) button.setEmoji(emoji);\n\t\tbutton.setStyle(style);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Prepare the message's action rows for pagination.\n\t *\n\t * @returns\n\t */\n\tprivate _readyActionRows(): this {\n\t\tif (!this.changedButtons) {\n\t\t\tthis._readyButton(this.buttons.first, this.buttonInfo.first.label, this.buttonInfo.first.emoji, this.buttonInfo.first.style);\n\t\t\tthis._readyButton(this.buttons.prev, this.buttonInfo.prev.label, this.buttonInfo.prev.emoji, this.buttonInfo.prev.style);\n\t\t\tthis._readyButton(this.buttons.next, this.buttonInfo.next.label, this.buttonInfo.next.emoji, this.buttonInfo.next.style);\n\t\t\tthis._readyButton(this.buttons.last, this.buttonInfo.last.label, this.buttonInfo.last.emoji, this.buttonInfo.last.style);\n\t\t}\n\n\t\tthis.buttons.first.setDisabled();\n\t\tthis.buttons.prev.setDisabled();\n\t\tthis.buttons.next.setDisabled();\n\t\tthis.buttons.last.setDisabled();\n\t\tif (this.totalEntry > this.limit) {\n\t\t\tthis.buttons.last.setDisabled(false);\n\t\t\tthis.buttons.next.setDisabled(false);\n\t\t}\n\n\t\tif (this.loop && this.totalEntry > this.limit) {\n\t\t\tthis.buttons.first.setDisabled(false);\n\t\t\tthis.buttons.prev.setDisabled(false);\n\t\t}\n\n\t\tthis.mainActionRow.setComponents(Object.values(this.buttons));\n\t\tthis.actionRows = [this.mainActionRow];\n\t\tif (this.extraRows.length > 0) {\n\t\t\tfor (const row of this.extraRows) {\n\t\t\t\tif (row.position === ExtraRowPosition.Above) this.actionRows.unshift(...row.rows);\n\t\t\t\telse this.actionRows.push(...row.rows);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Prepare the message's payload.\n\t */\n\tprivate _readyPayloads(): Payload {\n\t\tthis._readyActionRows();\n\t\tthis.payload.ephemeral = this.ephemeral;\n\t\tthis.payload.components = this.actionRows;\n\t\tthis.payload.content = (Array.isArray(this.contents) ? this.contents[0] : this.contents) ?? undefined;\n\t\tconst embed = this.embeds.length ? EmbedBuilder.from(this.embeds[0]) : this;\n\t\tthis.payload.embeds = [embed];\n\t\tthis.payload.files = this.attachments;\n\t\treturn this.payload;\n\t}\n}\n","import { ButtonStyle } from 'discord.js';\n\nimport type { Options } from '../types';\n\n/**\n * The default options for the paginator.\n */\nexport const defaultOptions: Options = {\n\tfirstEmoji: '⏪',\n\tprevEmoji: '◀️',\n\tnextEmoji: '▶️',\n\tlastEmoji: '⏭',\n\tfirstLabel: '',\n\tprevLabel: '',\n\tnextLabel: '',\n\tlastLabel: '',\n\tlimit: 5,\n\tidle: 5 * 60 * 1_000,\n\tephemeral: false,\n\tprevDescription: '',\n\tpostDescription: '',\n\tattachments: [],\n\tcontents: [],\n\tbuttonStyle: ButtonStyle.Secondary,\n\tloop: false\n};\n","import type { PButtonStyle } from './ButtonsOptions';\nimport type { EmojiOptions } from './EmojiOptions';\nimport type { BaseMessageOptions } from 'discord.js';\n\nexport type PEmbeds = Required<BaseMessageOptions>['embeds'];\nexport type PAttachments = Required<BaseMessageOptions>['files'];\n\nexport enum ExtraRowPosition {\n\tAbove,\n\tBelow\n}\n\n/**\n * The options to customize the pagination.\n */\nexport interface Options extends EmojiOptions {\n\t/**\n\t * The attachments to show with the paginated messages.\n\t *\n\t * @defaultValue []\n\t */\n\tattachments: PAttachments;\n\t/**\n\t * The style of the paginator buttons.\n\t *\n\t * @defaultValue \"SECONDARY\"\n\t */\n\tbuttonStyle: PButtonStyle;\n\t/**\n\t * Contents if changing contents per page.\n\t *\n\t * @defaultValue []\n\t */\n\tcontents: string[];\n\t/**\n\t * Whether the reply should be ephemeral.\n\t *\n\t * @defaultValue false\n\t */\n\tephemeral: boolean;\n\t/**\n\t * The label for the first page button.\n\t *\n\t * @defaultValue \"\"\n\t */\n\tfirstLabel: string;\n\t/**\n\t * The number of seconds before the paginator will close after inactivity.\n\t *\n\t * @defaultValue 5 minutes\n\t */\n\tidle: number;\n\t/**\n\t * The label for the last page button.\n\t *\n\t * @defaultValue \"\"\n\t */\n\tlastLabel: string;\n\t/**\n\t * The number of entries to show per page.\n\t *\n\t * @defaultValue 5\n\t */\n\tlimit: number;\n\t/**\n\t * loop through the pages.\n\t *\n\t * @defaultValue false\n\t */\n\tloop: boolean;\n\t/**\n\t * The label for the next page button.\n\t *\n\t * @defaultValue \"\"\n\t */\n\tnextLabel: string;\n\n\t/**\n\t * The description to show after the paginated descriptions.\n\t *\n\t * @defaultValue \"\"\n\t */\n\tpostDescription: string;\n\t/**\n\t * The description to show before the paginated descriptions.\n\t *\n\t * @defaultValue \"\"\n\t */\n\tprevDescription: string;\n\t/**\n\t * The label for the previous page button.\n\t *\n\t * @defaultValue \"\"\n\t */\n\tprevLabel: string;\n}\n","import type { BaseInteraction, Message, User } from 'discord.js';\n\nexport const authorOrUser = (messageOrInteraction: BaseInteraction | Message): User =>\n\t'user' in messageOrInteraction ? messageOrInteraction.user : messageOrInteraction.author;\n"]}